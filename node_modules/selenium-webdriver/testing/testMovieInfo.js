// Licensed to the Software Freedom Conservancy (SFC) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The SFC licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

/**
 * @fileoverview An example WebDriver script.
 *
 * Before running this script, ensure that Mozilla's geckodriver is present on
 * your system PATH: <https://github.com/mozilla/geckodriver/releases>
 *
 * Usage:
 *   // Default behavior
 *   node selenium-webdriver/example/google_search.js
 *
 *   // Target Chrome locally; the chromedriver must be on your PATH
 *   SELENIUM_BROWSER=chrome node selenium-webdriver/example/google_search.js
 *
 *   // Use a local copy of the standalone Selenium server
 *   SELENIUM_SERVER_JAR=/path/to/selenium-server-standalone.jar \
 *     node selenium-webdriver/example/google_search.js
 *
 *   // Target a remote Selenium server
 *   SELENIUM_REMOTE_URL=http://www.example.com:4444/wd/hub \
 *     node selenium-webdriver/example/google_search.js
 */

/**
 * Test Cases:
 * Here are the UI tests that should be done through this test program
 *  1. Typing a keyword and hitting enter
 *      Expected outcome: Should regurgitate same keyword
 *  2. Typing a keyword and clicking search
 *      Expected outcome: Should regurgitate same keyword
 *  3. Typing nothing and hitting enter/clicking search
 *      Expected outcome: Should regurgitate "", error shows 
 *  4. Clicking search right away
 *      Expected outcome: Should regurgitate "", error shows
 *  5. Typing assorted characters (not alphanumerical) and hitting enter/clicking search
 *      Expected outcome: Should regurgitate same keyword, error shows
 *  6. Typing space and hitting enter/clicking search
 *      Expected outcome: Should regurgitate " ", error shows
 *  7. Typing keyword "pride" and hitting enter/clicking search
 *      Expected outcome: Should regurgitate "pride", title shown is "Pride and Prejudice"
 *  8. Typing keyword "Jennifer Aniston" and hitting enter/clicking search
 *      Expected outcome: Should regurgitate "Jennifer Aniston", table pops up with 20 elements
 */     

// run by 'SELENIUM_BROWSER=chrome node testing/testMovieInfo'

const { Builder, By, Key, until } = require('..')

const driver = new Builder().forBrowser('chrome').build()

driver
    .get('file:///Users/pavanaatawale/Desktop/Personal/Career/MovieInfo/index.html')

    // Test Case 1: 
    .then((_) => driver.findElement(By.id('keyword')).sendKeys('pride', Key.RETURN))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), "pride"), 100000))

    // Test Case 2:
    .then((_) => driver.findElement(By.id('keyword')).sendKeys('pride'))
    .then((_) => driver.findElement(By.id('search_btn')).click())  
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), "pride"), 100000))

    // Test Case 3:
    .then((_) => driver.findElement(By.id('keyword')).sendKeys('', Key.RETURN))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), ""), 100000))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('error')), "wrong"), 100000))

    // Test Case 4:
    .then((_) => driver.findElement(By.id('search_btn')).click())
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), ""), 100000))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('error')), "wrong"), 100000)) 

    // Test Case 5:
    .then((_) => driver.findElement(By.id('keyword')).sendKeys('&^%#&&*^$%', Key.RETURN))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), "&^%#&&*^$%"), 100000))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('error')), "wrong"), 100000)) 

    // Test Case 6:
    .then((_) => driver.findElement(By.id('keyword')).sendKeys(' ', Key.RETURN))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), " "), 100000))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('error')), "wrong"), 100000))
    
    // Test Case 7:
    .then((_) => driver.findElement(By.id('keyword')).sendKeys('pride', Key.RETURN))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), "pride"), 100000))
    .then((_) => driver.wait(until.elementIsVisible(driver.findElement(By.id('title'))), 10000))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('title')), "Pride & Prejudice"), 10000))

    // Test Case 8:
    .then((_) => driver.findElement(By.id('keyword')).sendKeys('Jennifer Aniston', Key.RETURN))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('search_phrase')), "Jennifer Aniston"), 100000))
    .then((_) => driver.wait(until.elementIsVisible(driver.findElement(By.id('actor'))), 10000))
    .then((_) => driver.wait(until.elementTextContains(driver.findElement(By.id('actor')), "Jennifer Aniston"), 10000))
    .then((_) => driver.wait(until.elementIsVisible(driver.findElement(By.css("[class='actor_result val'] tr"))), 10000))

    .then((_) => driver.quit())


    // driver.wait(function() {
    //     return driver.findElement(By.cssSelector("[class='actor_result val'] tr")).size() == 20;
    // }, 1000);